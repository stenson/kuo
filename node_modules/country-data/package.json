{
  "name": "country-data",
  "version": "0.0.13",
  "description": "Data about countries - like their ISO codes and currencies",
  "homepage": "https://github.com/OpenBookPrices/country-data",
  "bugs": {
    "url": "https://github.com/OpenBookPrices/country-data/issues"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/OpenBookPrices/country-data.git"
  },
  "keywords": [
    "data",
    "country"
  ],
  "author": {
    "name": "Edmund von der Burg"
  },
  "license": "AGPL",
  "devDependencies": {
    "canonical-json": "0.0.1",
    "csv": "~0.2.9",
    "mocha": "~1.9.0",
    "chai": "~1.8.1"
  },
  "dependencies": {
    "underscore": "~1.4.4"
  },
  "readme": "# Country Data\n\n[![Build Status](https://travis-ci.org/OpenBookPrices/country-data.png)](https://travis-ci.org/OpenBookPrices/country-data)\n\nThere are lots of little bits of data that you often need relating to countries,\nand I couldn't find any easy to use source of it. So I compiled it all here.\n\n## Work in Progress\n\nThis code base may change a bit until it hits `0.1.x` - feel free to use it, but be sure to check between upgrades.\n\nI suspect that many of the `currencies` entries on the countries may be wrong. Help checking them would be appreciated.\n\n\n## Countries\n\nThe data currently provided for each country is:\n\n  * `name` The english name for the country\n  * `alpha2` The [ISO 3166-1 alpha 2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code\n  * `alpha3` The [ISO 3166-1 alpha 3](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) code\n  * `status`: The ISO status of the entry: either 'assigned' or 'reserved'.\n  * `currencies` An array of [ISO 4217 currency codes](http://en.wikipedia.org/wiki/ISO_4217) with the primary one first\n  * `countryCallingCodes` An array of the international call prefixes for this country.\n  * `ioc` The [International Olympic Committee country code](http://en.wikipedia.org/wiki/List_of_IOC_country_codes)\n\n## Regions\n\nCountries are ofter grouped into regions. The list of regions is by no means exhaustive, pull requests very welcome for additions.\n\n  * `countries` An array of `alpha2` codes for the countries in this region.\n\n## Currencies\n\nIt is not that useful to just have the currency code(s) for a country, so included is currency data too:\n\n  * `name` The english name for the currency\n  * `code` The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) code\n  * `number` The [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) number\n  * `decimals` The number of decimal digits conventionally shown\n\n## Lookup\n\nTo make finding easier there are utility methods that can search the countries and currencies. See examples below.\n\n\n## Installing\n\n``` bash\nnpm install country-data\n```\n\n\n## Example usage\n\n``` javascript\nvar countries  = require('country-data').countries,\n    currencies = require('country-data').currencies,\n    regions    = regions('country-data').regions;\n\n// .all gives you an array of all entries\nconsole.log( countries.all );\nconsole.log( currencies.all );\n\n// countries are found using alpha2 or alpha3 (both uppercase)\nconsole.log( countries.BE.name );        // 'Belgium'\nconsole.log( countries.FRA.currencies ); // ['EUR']\n\n// currencies are accessed by their code (uppercase)\nconsole.log( currencies.USD.name ); // 'United States dollar'\n\n// regions are accessed using a camel case name\nconsole.log( regions.europe.countries )\n```\n\n``` javascript\nvar lookup = require('country-data').lookup;\n\n// Match a value (grab first from array)\nvar france = lookup.countries({name: 'France'})[0];\n\n// Or match one of several possible values.\nvar eurozone_countries = lookup.countries({currencies: 'EUR'});\n```\n\nIt is very simple for now - feel free to contribute more helpful accessors.\n\n\n## Possible future additions\n\nMore data for each country is most welcome. Obvious things that it might be nice\nto add are:\n\n### Countries\n\n  * Top level domains\n  * Wikipedia links\n  * Coordinates (centroid, bounding box, etc)\n  * International dialling codes\n  * Languages spoken - most common first\n\n### Currencies\n\n  * currency symbols\n  * other currency that it is [pegged](http://en.wikipedia.org/wiki/Fixed_exchange_rate) to\n\n\n## Other similar bits of code\n\n* [libphonenumber](https://code.google.com/p/libphonenumber/) \"Google's common Java, C++ and Javascript library for parsing, formatting, storing and validating international phone numbers.\"\n\n\n## How to contribute\n\nThe final format is JSON, but it is easier to work with CSV. Hence in the `data`\nfolder there are CSV files and scripts that convert them to JSON. Please don't\nedit the JSON directly, but do it via the CSV.\n\nThese are the steps required:\n\n``` bash\n# Clone the repo (or better your fork of it)\ngit clone https://github.com/OpenBookPrices/country-data.git\ncd country-data\n\n# install the dependencies\nnpm install .\n\n# Edit the countries.csv\nopen data/countries.csv\n\n# Convert the raw data (CSV or JS files) to JSON\nmake\n\n# Run the tests\nmocha\n\n# If all is ok commit and push\ngit add .\ngit commit\ngit push\n\n# Then send a pull request with your changes. Ideally use several small commits,\n# and reference a source that backs up the change.\n```\n\n\n## Sources\n\nThe currency data was copied from the [Wikipedia ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) page.\n\nThe country calling codes came from the  [Wikipedia country calling codes](http://en.wikipedia.org/wiki/List_of_country_calling_codes) page.\n",
  "readmeFilename": "README.md",
  "_id": "country-data@0.0.13",
  "dist": {
    "shasum": "6db87a7d3cf2898eda3cf5dce285e8612cb25d05"
  },
  "_from": "country-data@*",
  "_resolved": "https://registry.npmjs.org/country-data/-/country-data-0.0.13.tgz"
}
